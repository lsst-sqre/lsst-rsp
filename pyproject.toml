[project]
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
name = "lsst-rsp"
description = "Utility functions for the Rubin Science Platform"
license = { text = "MIT"}
readme= "README.md"
keywords = [
    "rubin",
    "lsst",
]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: POSIX",
    "Typing :: Typed",
]

requires-python = ">=3.12"
dependencies = [
    "Deprecated",
    "IPython",
    "pyvo",
    "httpx",
    "pyyaml",
    "structlog",  # Uses CalVer, not SemVer
    "symbolicmode",
    "xmltodict"
]
dynamic = ["version"]

[[project.authors]]
name = "Association of Universities for Research in Astronomy, Inc. (AURA)"
email = "sqre-admin@lists.lsst.org"

[project.scripts]
launch-rubin-jupyterlab = "lsst.rsp.startup.cli:launch_lab"
provision-landing-page  = "lsst.rsp.startup.cli:provision_landing_page"

[project.urls]
Homepage = "https://rsp.lsst.io/"
Source = "https://github.com/lsst-sqre/lsst-rsp"

[build-system]
requires = ["setuptools>=61", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[dependency-groups]
dev = [
    "coverage[toml]",
    "pytest>=8.3",
    "pytest-asyncio>=0.25",
    "pytest-cov>=6",
    "pytest-httpx",
    "respx",
]
docs = [
    "scriv",
]
lint = [
    "pre-commit",
    "pre-commit-uv",
    "ruff>=0.9",
]
tox = [
    "tox>=4.24",
    "tox-uv>=1.25",
]
typing = [
    "mypy>=1.15",
    "types-deprecated",
    "types-pyyaml",
    "types-requests",
]

[tool.black]
line-length = 79
target-version = ["py313"]

[tool.coverage.run]
parallel = true
branch = true
source = ["lsst"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:"
]

[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
exclude = "tests/data/files"
ignore_missing_imports = true
local_partial_types = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "strict"
# The python_files setting is not for test detection (pytest will pick up any
# test files named *_test.py without this setting) but to enable special
# assert processing in any non-test supporting files under tests.  We
# conventionally put test support functions under tests.support and may
# sometimes use assert in test fixtures in conftest.py, and pytest only
# enables magical assert processing (showing a full diff on assert failures
# with complex data structures rather than only the assert message) in files
# listed in python_files.
python_files = ["tests/*.py", "tests/*/*.py"]

# Use the generic Ruff configuration in ruff.toml and extend it with only
# project-specific settings.
[tool.ruff]
extend = "ruff-shared.toml"

[tool.ruff.lint.extend-per-file-ignores]
"src/lsst/rsp/startup/**" = [
    "S606",    # Sometimes we really mean os.execve(), not subprocess.run()
]
"src/lsst/rsp/startup/services/labrunner/labrunner.py" = [
    "S108",    # We really do mean explicitly `/tmp`
]
"tests/data/files/**" = [
    "INP001",  # these aren't real Python modules
]
"tests/startup_test.py" = [
    "S108",    # We really do mean explicitly `/tmp`
]

[tool.ruff.lint.isort]
known-first-party = ["lsst.rsp", "tests"]
split-on-trailing-comma = false

[tool.scriv]
categories = [
    "Backwards-incompatible changes",
    "New features",
    "Bug fixes",
    "Other changes",
]
entry_title_template = "{{ version }} ({{ date.strftime('%Y-%m-%d') }})"
format = "md"
md_header_level = "2"
new_fragment_template = "file:changelog.d/_template.md.jinja"
skip_fragments = "_template.md.jinja"

[tool.setuptools.packages.find]
# https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
where = ["src"]
include = ["lsst*"]

[tool.setuptools_scm]
